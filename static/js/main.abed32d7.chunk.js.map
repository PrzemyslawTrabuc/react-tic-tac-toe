{"version":3,"sources":["index.jsx"],"names":["Square","props","className","onClick","symbol","ResetButton","Board","table","sessionStorage","length","stored_slots","JSON","parse","window","getItem","i","nextPlayer","state","slots","Player_X_is_next","this","slice","console","log","Clear_Board","setState","Find_Winner","handleClick","includes","handleResetButton","setItem","stringify","Next_player","winner","winner_message","id","renderSquare","renderResetButton","React","Component","Game","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abed32d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {   \r\n      return (        \r\n        <button className=\"square\" onClick={props.onClick}>\r\n          {props.symbol}\r\n        </button>\r\n      );\r\n   \r\n  }\r\n  function ResetButton(props) {   \r\n    return (        \r\n      <button className=\"resetButton\" onClick={props.onClick}>\r\n        RESTART\r\n      </button>\r\n    );\r\n \r\n}\r\n\r\n  class Board extends React.Component {    \r\n    constructor(props)\r\n    {   \r\n      var table = [];\r\n      if(sessionStorage.length !== 0)\r\n      {\r\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\"));       \r\n      for(let i =0; i < 9; i++)\r\n      {\r\n        table[i]= stored_slots[i];\r\n      }     \r\n    }else\r\n    {\r\n      for(let i =0; i < 9; i++)\r\n      {\r\n      table[i]= null;\r\n      }\r\n    }    \r\n      var nextPlayer = true;\r\n      if(window.sessionStorage.getItem(\"nextPlayer\") === 'false')\r\n      {\r\n      nextPlayer = false;\r\n      }     \r\n      super(props);\r\n      this.state=\r\n      {slots: table,\r\n       Player_X_is_next: nextPlayer,                \r\n      };         \r\n    }  \r\n \r\n    handleResetButton()\r\n    {\r\n      const slots = this.state.slots.slice();\r\n      //const Next_player = true;      \r\n      Clear_Board(slots); \r\n      this.setState({slots: slots, /* Player_X_is_next: Next_player */});\r\n    } \r\n    handleClick(i) {    \r\n      const slots = this.state.slots.slice();  \r\n      if(Find_Winner(slots) !==null)\r\n      {        \r\n        return;           \r\n      }   \r\n      if(this.state.Player_X_is_next === true && slots[i]===null)\r\n      {\r\n        slots[i] = 'X';\r\n        this.setState({slots: slots,\r\n          Player_X_is_next: false     \r\n          });            \r\n          \r\n      }else if(this.state.Player_X_is_next === false && slots[i]===null)\r\n      {\r\n        slots[i] = 'O';\r\n        this.setState({slots: slots,\r\n          Player_X_is_next: true  \r\n          });   \r\n      }       \r\n    }\r\n    renderSquare(i) {  \r\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\"));\r\n      return(         \r\n      <Square \r\n      symbol={stored_slots[i]} \r\n      onClick={() => this.handleClick(i)}      \r\n      />\r\n      );\r\n    }\r\n    renderResetButton() {\r\n      if(Find_Winner(this.state.slots) !== null || !this.state.slots.includes(null))\r\n      {         \r\n      return( \r\n      <ResetButton className='resetButton'   \r\n      onClick={() => this.handleResetButton()}\r\n      ></ResetButton>\r\n      );\r\n      }\r\n      else{return;}\r\n    }\r\n  \r\n    render() \r\n    {  \r\n      window.sessionStorage.setItem('table',JSON.stringify(this.state.slots));     \r\n      let Next_player = 'Next player: X';      \r\n      const winner = Find_Winner(this.state.slots);\r\n      let winner_message = null;\r\n      let table = this.state.slots;     \r\n      if(this.state.Player_X_is_next===true)\r\n      {\r\n      Next_player = 'Next Player: X';\r\n      }else\r\n      {\r\n      Next_player = 'Next Player: O';\r\n      } \r\n      for(let i = 0; i < 9; i++)\r\n      {\r\n        if(table!==null)\r\n        {\r\n          if(winner !== null)\r\n          { \r\n          Next_player = 'GAME OVER!!!';\r\n          winner_message = 'The Winner is: Player ' + winner;               \r\n          }else if(!this.state.slots.includes(null))\r\n          {\r\n            Next_player = 'GAME OVER!!!';\r\n            winner_message = 'DRAW'\r\n          }           \r\n        }\r\n      }     \r\n      window.sessionStorage.setItem('nextPlayer',this.state.Player_X_is_next);   \r\n      return (\r\n        <div id=\"main\">\r\n          <div className=\"status\">{Next_player}</div>\r\n          <div id='board'>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n          </div>\r\n          <div className=\"winner\">{winner_message}</div>\r\n          <div id=\"reset_button_div\">{this.renderResetButton()}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {  \r\n    render() {     \r\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\")); \r\n      console.log(stored_slots);    \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n  );\r\n    \r\n  function Find_Winner(slots)\r\n    {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (slots[a] && slots[a] === slots[b] && slots[a] === slots[c]) {          \r\n          return slots[a];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    function Clear_Board(slots)\r\n    {\r\n     for(let i =0; i < 9; i++)\r\n     {\r\n       slots[i] = null;           \r\n     }\r\n     console.log(\"Board now is clean\");     \r\n     return slots;  \r\n    }"],"sourceRoot":""}
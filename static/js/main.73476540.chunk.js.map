{"version":3,"sources":["Square.js","Board.js","index.jsx"],"names":["Square","props","className","slot_flag","onClick","symbol","Find_Winner","slots","lines","i","length","a","b","c","Winner","winnerPlayer","ResetButton","Board","table","sessionStorage","stored_slots","JSON","parse","window","getItem","nextPlayer","state","Player_X_is_next","this","slice","Clear_Board","setState","flag","win_slots","Show_win_slots","handleClick","includes","handleResetButton","setItem","stringify","winner","winner_message","Next_player","fullBoardFlag","id","renderSquare","renderWinnerText","renderResetButton","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73476540.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {  \n    return (        \n      <button className={'square '+ props.slot_flag} onClick={props.onClick}>\n        {props.symbol}  \n      </button>\n    ); \n}\nexport default Square;","import Square from './Square.js'\nimport React from 'react';\n\nclass Board extends React.Component {    \n    var \n    constructor(props)\n    {   \n      var table = [];\n      if(sessionStorage.length !== 0)\n      {\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\"));       \n      for(let i =0; i < 9; i++)\n      {\n        table[i]= stored_slots[i];\n      }     \n    }else\n    {\n      for(let i =0; i < 9; i++)\n      {\n      table[i]= null;\n      }\n    }    \n      var nextPlayer = true;\n      if(window.sessionStorage.getItem(\"nextPlayer\") === 'false')\n      {\n      nextPlayer = false;\n      }     \n      super(props);\n      this.state=\n      {slots: table,\n       Player_X_is_next: nextPlayer,                \n      };         \n    }  \n \n    handleResetButton()\n    {\n      const slots = this.state.slots.slice();\n      //const Next_player = true;      \n      Clear_Board(slots); \n      this.setState({slots: slots, /* Player_X_is_next: Next_player */});\n    } \n    handleClick(i) {    \n      const slots = this.state.slots.slice();  \n      if(Find_Winner(slots) !==null)\n      {        \n        return;           \n      }   \n      if(this.state.Player_X_is_next === true && slots[i]===null)\n      {\n        slots[i] = 'X';\n        this.setState({slots: slots,\n          Player_X_is_next: false     \n          });            \n          \n      }else if(this.state.Player_X_is_next === false && slots[i]===null)\n      {\n        slots[i] = 'O';\n        this.setState({slots: slots,\n          Player_X_is_next: true  \n          });   \n      }       \n    }\n    renderSquare(i) { \n      var flag=\"\"; \n      var win_slots = Show_win_slots(this.state.slots);      \n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\")); \n      if(win_slots!==null){\n      if(i===win_slots[0] || i=== win_slots[1] ||i=== win_slots[2])\n      {\n        flag='win';      \n      }else\n      {\n        flag='neutral';\n      }  \n    }      \n      return(        \n      <Square className={'bob'}\n      slot_flag={flag}\n      symbol={stored_slots[i]}\n      onClick={() => this.handleClick(i)}      \n      />\n      );\n      \n    }\n\n    renderResetButton() {\n      if(Find_Winner(this.state.slots) !== null || !this.state.slots.includes(null))\n      {         \n      return( \n      <ResetButton className='resetButton'   \n      onClick={() => this.handleResetButton()}\n      ></ResetButton>\n      );\n      }\n      else{return;}\n    }\n\n    renderWinnerText() {\n      window.sessionStorage.setItem('table',JSON.stringify(this.state.slots));    \n      if(Find_Winner(this.state.slots) !== null || !this.state.slots.includes(null))\n      {   \n        const winner = Find_Winner(this.state.slots);       \n        let winner_message = \"Draw\";    \n        if(winner)\n        winner_message = 'The Winner is: Player ' + winner;    \n      return( \n      <Winner className='winner'   \n      winnerPlayer = {winner_message}\n      ></Winner>\n      );\n      }\n      else{return;}\n    }\n  \n    render() \n    {      \n      window.sessionStorage.setItem('table',JSON.stringify(this.state.slots));     \n      let Next_player = 'Next player: X';\n      if(this.state.Player_X_is_next===true)\n      {\n      Next_player = 'Next Player: X';    \n      }else\n      {\n      Next_player = 'Next Player: O'; \n      } \n      let winner = Find_Winner(this.state.slots)\n      window.sessionStorage.setItem('nextPlayer',this.state.Player_X_is_next); \n      var fullBoardFlag=true;  \n      for(let i=0;i<9;i++)\n      {\n        if(this.state.slots[i] === null)\n        {\n          fullBoardFlag=false;\n        }\n      }\n      if(winner !== null || fullBoardFlag === true)\n      {\n        Next_player=\"GAME OVER!\"\n      }\n      return (\n        <div id=\"main\">\n          <div className=\"status\">{Next_player}</div>\n          <div id='board'>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n          </div>          \n          <div className=\"winner\">{this.renderWinnerText()}</div>         \n          <div id=\"reset_button_div\">{this.renderResetButton()}</div>\n        </div>\n      );\n    }\n  }\n\n  function Find_Winner(slots)\n    {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (slots[a] && slots[a] === slots[b] && slots[a] === slots[c]) {   \n          return slots[a];\n        }\n      }\n      return null;\n    }\n    function Show_win_slots(slots)\n    {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (slots[a] && slots[a] === slots[b] && slots[a] === slots[c]) {           \n          return lines[i];\n        }\n      }\n      return null;\n    }\n    function Clear_Board(slots)\n    {\n     for(let i =0; i < 9; i++)\n     {\n       slots[i] = null;           \n     }\n     //console.log(\"Board now is clean\");     \n     return slots;  \n    }\n\n    function Winner(props) {   \n        return (        \n          <div className=\"winner\">\n            {props.winnerPlayer}\n          </div>\n        );\n      \n      }\n\n    \n  function ResetButton(props) {   \n    return (        \n      <button className=\"resetButton\" onClick={props.onClick}>\n        RESTART\n      </button>\n    );\n    \n \n}\n\nexport default Board;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board.js';\n\n\n  class Game extends React.Component {  \n    render() {     \n      //var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\")); \n      //console.log(stored_slots);    \n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game/>,\n    document.getElementById('root')\n  );\n    "],"sourceRoot":""}
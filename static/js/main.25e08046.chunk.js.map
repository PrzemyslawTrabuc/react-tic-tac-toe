{"version":3,"sources":["Square.js","Board.js","index.jsx"],"names":["Square","props","className","slot_flag","onClick","symbol","Find_Winner","slots","lines","i","length","a","b","c","Winner","winnerPlayer","ResetButton","Board","table","sessionStorage","stored_slots","JSON","parse","window","getItem","nextPlayer","state","Player_X_is_next","this","slice","Clear_Board","setState","flag","win_slots","Show_win_slots","handleClick","includes","handleResetButton","setItem","stringify","winner","winner_message","Next_player","fullBoardFlag","id","renderSquare","renderWinnerText","renderResetButton","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25e08046.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props) {  \r\n    return (        \r\n      <button className={'square '+ props.slot_flag} onClick={props.onClick}>\r\n        {props.symbol}  \r\n      </button>\r\n    ); \r\n}\r\nexport default Square;","import Square from './Square.js'\r\nimport React from 'react';\r\n\r\nclass Board extends React.Component {    \r\n    var \r\n    constructor(props)\r\n    {   \r\n      var table = [];\r\n      if(sessionStorage.length !== 0)\r\n      {\r\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\"));       \r\n      for(let i =0; i < 9; i++)\r\n      {\r\n        table[i]= stored_slots[i];\r\n      }     \r\n    }else\r\n    {\r\n      for(let i =0; i < 9; i++)\r\n      {\r\n      table[i]= null;\r\n      }\r\n    }    \r\n      var nextPlayer = true;\r\n      if(window.sessionStorage.getItem(\"nextPlayer\") === 'false')\r\n      {\r\n      nextPlayer = false;\r\n      }     \r\n      super(props);\r\n      this.state=\r\n      {slots: table,\r\n       Player_X_is_next: nextPlayer,                \r\n      };         \r\n    }  \r\n \r\n    handleResetButton()\r\n    {\r\n      const slots = this.state.slots.slice();\r\n      //const Next_player = true;      \r\n      Clear_Board(slots); \r\n      this.setState({slots: slots, /* Player_X_is_next: Next_player */});\r\n    } \r\n    handleClick(i) {    \r\n      const slots = this.state.slots.slice();  \r\n      if(Find_Winner(slots) !==null)\r\n      {        \r\n        return;           \r\n      }   \r\n      if(this.state.Player_X_is_next === true && slots[i]===null)\r\n      {\r\n        slots[i] = 'X';\r\n        this.setState({slots: slots,\r\n          Player_X_is_next: false     \r\n          });            \r\n          \r\n      }else if(this.state.Player_X_is_next === false && slots[i]===null)\r\n      {\r\n        slots[i] = 'O';\r\n        this.setState({slots: slots,\r\n          Player_X_is_next: true  \r\n          });   \r\n      }       \r\n    }\r\n    renderSquare(i) { \r\n      var flag=\"\"; \r\n      var win_slots = Show_win_slots(this.state.slots);      \r\n      var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\")); \r\n      if(win_slots!==null){\r\n      if(i===win_slots[0] || i=== win_slots[1] ||i=== win_slots[2])\r\n      {\r\n        flag='win';      \r\n      }else\r\n      {\r\n        flag='neutral';\r\n      }  \r\n    }      \r\n      return(        \r\n      <Square className={'bob'}\r\n      slot_flag={flag}\r\n      symbol={stored_slots[i]}\r\n      onClick={() => this.handleClick(i)}      \r\n      />\r\n      );\r\n      \r\n    }\r\n\r\n    renderResetButton() {\r\n      if(Find_Winner(this.state.slots) !== null || !this.state.slots.includes(null))\r\n      {         \r\n      return( \r\n      <ResetButton className='resetButton'   \r\n      onClick={() => this.handleResetButton()}\r\n      ></ResetButton>\r\n      );\r\n      }\r\n      else{return;}\r\n    }\r\n\r\n    renderWinnerText() {\r\n      window.sessionStorage.setItem('table',JSON.stringify(this.state.slots));    \r\n      if(Find_Winner(this.state.slots) !== null || !this.state.slots.includes(null))\r\n      {   \r\n        const winner = Find_Winner(this.state.slots);       \r\n        let winner_message = \"Draw\";    \r\n        if(winner)\r\n        winner_message = 'The Winner is: Player ' + winner;    \r\n      return( \r\n      <Winner className='winner'   \r\n      winnerPlayer = {winner_message}\r\n      ></Winner>\r\n      );\r\n      }\r\n      else{return;}\r\n    }\r\n  \r\n    render() \r\n    {      \r\n      window.sessionStorage.setItem('table',JSON.stringify(this.state.slots));     \r\n      let Next_player = 'Next player: X';\r\n      if(this.state.Player_X_is_next===true)\r\n      {\r\n      Next_player = 'Next Player: X';    \r\n      }else\r\n      {\r\n      Next_player = 'Next Player: O'; \r\n      } \r\n      let winner = Find_Winner(this.state.slots)\r\n      window.sessionStorage.setItem('nextPlayer',this.state.Player_X_is_next); \r\n      var fullBoardFlag=true;  \r\n      for(let i=0;i<9;i++)\r\n      {\r\n        if(this.state.slots[i] === null)\r\n        {\r\n          fullBoardFlag=false;\r\n        }\r\n      }\r\n      if(winner !== null || fullBoardFlag === true)\r\n      {\r\n        Next_player=\"GAME OVER!\"\r\n      }\r\n      return (\r\n        <div id=\"main\">\r\n          <div className=\"status\">{Next_player}</div>\r\n          <div id='board'>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n          </div>          \r\n          <div className=\"winner\">{this.renderWinnerText()}</div>         \r\n          <div id=\"reset_button_div\">{this.renderResetButton()}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function Find_Winner(slots)\r\n    {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (slots[a] && slots[a] === slots[b] && slots[a] === slots[c]) {   \r\n          return slots[a];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    function Show_win_slots(slots)\r\n    {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (slots[a] && slots[a] === slots[b] && slots[a] === slots[c]) {           \r\n          return lines[i];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    function Clear_Board(slots)\r\n    {\r\n     for(let i =0; i < 9; i++)\r\n     {\r\n       slots[i] = null;           \r\n     }\r\n     //console.log(\"Board now is clean\");     \r\n     return slots;  \r\n    }\r\n\r\n    function Winner(props) {   \r\n        return (        \r\n          <div className=\"winner\">\r\n            {props.winnerPlayer}\r\n          </div>\r\n        );\r\n      \r\n      }\r\n\r\n    \r\n  function ResetButton(props) {   \r\n    return (        \r\n      <button className=\"resetButton\" onClick={props.onClick}>\r\n        RESTART\r\n      </button>\r\n    );\r\n    \r\n \r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Board from './Board.js';\r\n\r\n\r\n  class Game extends React.Component {  \r\n    render() {     \r\n      //var stored_slots = JSON.parse(window.sessionStorage.getItem(\"table\")); \r\n      //console.log(stored_slots);    \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n  );\r\n    "],"sourceRoot":""}